''Red Eclipse'' is on github, http://github.com/red-eclipse/. This means the development of the game is open and community-driven, and the github site is a place to host the repositories, which offers various tools to collaborate. In other words, anyone can make their ''fork'' (working copy) of the game, modify it, and suggest their changes to be merged back with the official game. This process is what they call a '''pull request''' on github.

==Github help==

Github offers plenty of help text pages. We're not going to cover much of this here. Rather, we want to give our players a first glance how to quickly submit a small change via a pull request. For further reading, see https://help.github.com/categories/collaborating-on-projects-using-issues-and-pull-requests/.

==Git documentation==

Git is the versioning system used on github, and therefore also currently used by Red Eclipse to keep track of all the changes and development history. When submitting a small modification, there is usually no need to deal with git commands. But there's extensive documentation available online. In case you'll need this, see https://git-scm.com/documentation.

==Single text files==

Let us assume you want to contribute a text description for one of the many in-game commands or variables. Or maybe you have spotted a typo in one of those descriptions. If you want to do that with a pull request on github, first navigate to the corresponding file. In this case, it is here:

https://github.com/red-eclipse/base/blob/master/config/usage.cfg

At the top right of the code box, you'll see some buttons. Click the pen-icon to edit the file. This will automatically create a new branch on your own fork for this. If you have not forked yet, that will be done automatically after your confirmation. Apply your additions or corrections using the online file editor. Once you are done, you can review your changes with the button at the bottom. You'll be asked to create a pull request and describe your changes. Make sure the summary (commit text) is short enough and makes sense also for someone who does not see which file was changed. For example, "fix typo on usage of guitext". That's it. Your pull request will be listed here:

https://github.com/red-eclipse/base/pulls

Once it was accepted and merged you can delete your branch. You'll be informed when it's save to do so. It's up to you what to do with your branch if your request has been rejected...

==Multiple files==

Once you have branches on your fork, you can edit the files there at will. And of course, you can also create a pull request after modifying several files. When you do so, you can and should review all changes and differences.

==Non-text files==

On github, it's easy to edit text files, such as source code or config files. But things get much more complicated when you want to submit non-text content like maps, models or icons. Maybe the easiest way to share these things is to put them on the forums, http://redeclipse.net/forum/viewforum.php?f=5. There the contribution can be discussed, and a developer can push the new content for you later.

Still, it is also possible to use pull requests for this type of contribution. Basically, you have two options: Use git console commands to commit and push your modifications. Or use some git client to do the same thing. Either way, you'll need to clone first, as described in the article about obtaining the [[obtain development version|development version]]. There you also find some clues about git and git clients. 

What makes things a bit tricky: You'll need to push your changes to a branch of your own fork, and then use that branch to create the pull request. For example, assume your fork is on

https://github.com/guy/base/

i.e. guy is your account name on github. Then you could use the following git commands.


1) Clone from your own fork to a local directory, e.g. ''re-patch''
  git clone https://github.com/guy/base re-patch 
2) apply your changes, add your files etc.
3) register new files
  git add mynewfiles
4) commit (and describe) your changes
  git commit -a
5) push your stuff to the branch on your own fork
  git push
6) got to your fork on the github site to create a pull request.
https://github.com/guy/base/

This example just illustrates that this can get a bit complicated. For details, see the help resources linked above.